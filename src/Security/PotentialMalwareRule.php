<?php declare(strict_types=1);

namespace macropage\PHPStan\Inspections\Security;

use PhpParser\Node;
use PhpParser\Node\Expr\Eval_;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Stmt\Function_;
use PhpParser\Node\Stmt\Return_;
use PhpParser\NodeFinder;
use PHPStan\Analyser\Scope;
use PHPStan\Rules\Rule;
use PHPStan\Rules\RuleErrorBuilder;

/**
 * Detects potential malware patterns in PHP code.
 *
 * This rule identifies suspicious code patterns commonly used in malware:
 * - eval() calls with decode functions like base64_decode, gzinflate, etc.
 * - Functions that return decode functions as their last statement
 * - touch() calls with 3 arguments (file hiding)
 * - get_defined_functions() calls
 *
 * @implements Rule<Node>
 */
class PotentialMalwareRule implements Rule
{
    private const string EVAL_MESSAGE = 'This eval looks pretty much as some malware.';
    private const string FILE_HIDE_MESSAGE = 'This looks pretty much as some malware hiding files manipulation.';
    private const string DECODE_MESSAGE = 'This function looks pretty much as part of some malware.';
    private const string CALL_MESSAGE = 'This function looks pretty much as part of some malware.';

    /** @var array<string, true> */
    private const array EVAL_SUSPECTS = [
        'base64_decode' => true,
        'gzinflate' => true,
        'gzuncompress' => true,
        'urldecode' => true,
        'curl_unescape' => true,
        'strrev' => true,
        'str_rot13' => true,
        'file_get_contents' => true,
        'curl_exec' => true,
    ];

    /** @var array<string, true> */
    private const array DECODE_SUSPECTS = [
        'base64_decode' => true,
        'gzinflate' => true,
        'gzuncompress' => true,
        'urldecode' => true,
        'curl_unescape' => true,
    ];

    public function getNodeType(): string
    {
        return Node::class;
    }

    /** @return list<RuleError> */
    public function processNode(Node $node, Scope $scope): array
    {
        if ($node instanceof Eval_) {
            return $this->processEval($node);
        }

        if ($node instanceof FuncCall) {
            return $this->processFuncCall($node);
        }

        if ($node instanceof Function_) {
            return $this->processFunction($node);
        }

        return [];
    }

    /** @return list<RuleError> */
    private function processEval(Eval_ $eval): array
    {
        $argument = $eval->expr;

        // Strip parentheses and @ operator
        while ($argument instanceof Node\Expr\Paren || $argument instanceof Node\Expr\ErrorSuppress) {
            if ($argument instanceof Node\Expr\Paren) {
                $argument = $argument->expr;
            } elseif ($argument instanceof Node\Expr\ErrorSuppress) {
                $argument = $argument->expr;
            }
        }

        if (!$argument instanceof FuncCall) {
            return [];
        }

        $functionName = $this->getFunctionName($argument);
        if ($functionName === null || !isset(self::EVAL_SUSPECTS[$functionName])) {
            return [];
        }

        // Special case: eval(file_get_contents('php://input')) is commonly used for interactive consoles
        if ($functionName === 'file_get_contents') {
            $args = $argument->getArgs();
            if (count($args) > 0 && $args[0]->value instanceof Node\Scalar\String_) {
                if ($args[0]->value->value === 'php://input') {
                    return [];
                }
            }
        }

        return [
            RuleErrorBuilder::message(self::EVAL_MESSAGE)
                ->identifier('security.potentialMalware.eval')
                ->line($eval->getStartLine())
                ->build(),
        ];
    }

    /** @return list<RuleError> */
    private function processFuncCall(FuncCall $funcCall): array
    {
        $functionName = $this->getFunctionName($funcCall);
        if ($functionName === null) {
            return [];
        }

        if ($functionName === 'touch') {
            $args = $funcCall->getArgs();
            if (count($args) === 3) {
                return [
                    RuleErrorBuilder::message(self::FILE_HIDE_MESSAGE)
                        ->identifier('security.potentialMalware.fileHide')
                        ->line($funcCall->getStartLine())
                        ->build(),
                ];
            }
        } elseif ($functionName === 'get_defined_functions') {
            return [
                RuleErrorBuilder::message(self::CALL_MESSAGE)
                    ->identifier('security.potentialMalware.call')
                    ->line($funcCall->getStartLine())
                    ->build(),
            ];
        }

        return [];
    }

    /** @return list<RuleError> */
    private function processFunction(Function_ $function): array
    {
        $stmts = $function->getStmts();
        if ($stmts === null || count($stmts) < 2) {
            return [];
        }

        $lastStmt = end($stmts);
        if (!$lastStmt instanceof Return_) {
            return [];
        }

        $returnExpr = $lastStmt->expr;
        if ($returnExpr === null) {
            return [];
        }

        // Strip parentheses and @ operator
        while ($returnExpr instanceof Node\Expr\Paren || $returnExpr instanceof Node\Expr\ErrorSuppress) {
            if ($returnExpr instanceof Node\Expr\Paren) {
                $returnExpr = $returnExpr->expr;
            } elseif ($returnExpr instanceof Node\Expr\ErrorSuppress) {
                $returnExpr = $returnExpr->expr;
            }
        }

        // Check for implicit function call
        if ($returnExpr instanceof FuncCall) {
            $functionName = $this->getFunctionName($returnExpr);
            if ($functionName !== null && isset(self::DECODE_SUSPECTS[$functionName])) {
                return [
                    RuleErrorBuilder::message(self::DECODE_MESSAGE)
                        ->identifier('security.potentialMalware.decode')
                        ->line($function->getStartLine())
                        ->build(),
                ];
            }
        }

        // Check for variable function call
        if ($returnExpr instanceof Node\Expr\Variable) {
            // For simplicity, we'll flag variable function calls that could be decode functions
            // In a more sophisticated implementation, we could track variable assignments
            return [
                RuleErrorBuilder::message(self::DECODE_MESSAGE)
                    ->identifier('security.potentialMalware.decode')
                    ->line($function->getStartLine())
                    ->build(),
            ];
        }

        return [];
    }

    private function getFunctionName(FuncCall $funcCall): ?string
    {
        if ($funcCall->name instanceof Node\Name) {
            return $funcCall->name->toLowerString();
        }

        return null;
    }
}